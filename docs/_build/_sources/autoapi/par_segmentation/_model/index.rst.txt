:orphan:

:py:mod:`par_segmentation._model`
=================================

.. py:module:: par_segmentation._model


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   par_segmentation._model.ImageQuantGradientDescent



Functions
~~~~~~~~~

.. autoapisummary::

   par_segmentation._model.create_offsets_spline



.. py:class:: ImageQuantGradientDescent(img: Union[numpy.ndarray, list], roi: Union[numpy.ndarray, list], sigma: float = 3.5, periodic: bool = True, thickness: int = 50, rol_ave: int = 5, rotate: bool = False, nfits: Union[int, None] = 100, iterations: int = 2, lr: float = 0.01, descent_steps: int = 300, adaptive_sigma: bool = False, batch_norm: bool = False, freedom: float = 10, roi_knots: int = 20, fit_outer: bool = True, zerocap: bool = False, save_training: bool = False, save_sims: bool = False, verbose: bool = True)


   .. py:method:: run()


   .. py:method:: preprocess(frame: numpy.ndarray, roi: numpy.ndarray) -> Tuple[numpy.ndarray, float, numpy.ndarray]

      Preprocesses a single image with roi specified

      Steps:
      - Straighten according to ROI
      - Apply rolling average
      - Either interpolated to a common length (self.nfits) or pad to length of largest image if nfits is not speficied
      - Normalise images, either to themselves or globally



   .. py:method:: init_tensors()

      Initialising offsets, cytoplasmic concentrations and membrane concentrations as zero
      Sigma initialised as user-specified value (or default), and may be trained



   .. py:method:: sim_images() -> Tuple[tensorflow.Tensor, tensorflow.Tensor]

      Simulates images according to current membrane and cytoplasm concentration estimates and offsets



   .. py:method:: losses_full() -> tensorflow.Tensor


   .. py:method:: fit()


   .. py:method:: adjust_roi()

      Can do after a preliminary fit to refine coordinates
      Must refit after doing this



   .. py:method:: plot_losses(log: bool = False)



.. py:function:: create_offsets_spline(offsets_t, roi_knots, periodic, nimages, nfits, roi) -> tensorflow.Tensor


